    $app->get('/login/', function () use ($app) {

      // $params = $app->request()->getBody();
      // $key = "supersecretkeyyoushouldnotcommittogithub";
      // $token = array(
      //     "id" => "2",
      //     "exp" => time() + (60 * 60 * 24),
      //     "scope" => ["read", "write", "delete"]
      //     );
      // $jwt = JWT::encode($token, $key);
      // $app->response->headers->set('Content-Type', 'application/json');
      // echo json_encode(array("token" =>$jwt));


      $tokenId    = base64_encode(mcrypt_create_iv(32));
      $issuedAt   = time();
      $notBefore  = $issuedAt + 10;             //Adding 10 seconds
      $expire     = $notBefore + 60;            // Adding 60 seconds
      $serverName = gethostname();              // Retrieve the server name from config file
      
      /*
       * Create the token as an array
       */
      $data = [
          'iat'  => $issuedAt,         // Issued at: time when the token was generated
          'jti'  => $tokenId,          // Json Token Id: an unique identifier for the token
          'iss'  => $serverName,       // Issuer
          'nbf'  => $notBefore,        // Not before
          'exp'  => $expire,           // Expire
          'data' => [                  // Data related to the signer user
              'userId'   => '1234', // userid from the users table
              'userName' => 'josh', // User name
          ]
      ];


      /*
       * Code here...
       */

          /*
           * Extract the key, which is coming from the config file. 
           * 
           * Best suggestion is the key to be a binary string and 
           * store it in encoded in a config file. 
           *
           * Can be generated with base64_encode(openssl_random_pseudo_bytes(64));
           *
           * keep it secure! You'll need the exact key to verify the 
           * token later.
           */
          $secretKey = base64_decode('supersecretkeyyoushouldnotcommittogithub');
          
          /*
           * Encode the array to a JWT string.
           * Second parameter is the key to encode the token.
           * 
           * The output string can be validated at http://jwt.io/
           */
          $jwt = JWT::encode(
              $data,      //Data to be encoded in the JWT
              $secretKey, // The signing key
              'HS512'     // Algorithm used to sign the token, see https://tools.ietf.org/html/draft-ietf-jose-json-web-algorithms-40#section-3
              );
          
          $_SESSION['userName'] = "aaa";
          
          $unencodedArray = ['jwt' => $jwt];
          echo json_encode($unencodedArray);



      // $params = $app->request()->getBody();
      // $key = "supersecretkeyyoushouldnotcommittogithub";

      // $token = array(
      //     "id" => "2",
      //     "exp" => time() + (60 * 60 * 24),
      //     "scope" => ["read", "write", "delete"]
      //     );

      // $jwt = JWT::encode($token, $key);
      // $app->response->headers->set('Content-Type', 'application/json');
      // echo json_encode(array("token" =>$jwt));

    });